{"version":3,"sources":["app/modules/setting/pages/setting/setting.component.html","app/modules/setting/pages/setting/setting.component.scss","app/modules/setting/pages/setting/setting.component.ts","app/modules/setting/setting-routing.module.ts","app/modules/setting/setting.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"contents-width mx-auto px-3 py-5\\\">\\n    <h2 class=\\\"text-large mb-4 text-center font-weight-bold\\\">{{ 'setting.title' | translate }}</h2>\\n    <p class=\\\"mb-4 text-md-center\\\" [innerHTML]=\\\"'setting.read' | translate\\\"></p>\\n\\n    <div class=\\\"mb-4 p-3 bg-white\\\">\\n        <form *ngIf=\\\"baseForm\\\" [formGroup]=\\\"baseForm\\\">\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.theater' | translate }}</p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <select class=\\\"form-control\\\" formControlName=\\\"sellerBranchCode\\\" (change)=\\\"changePosList()\\\">\\n                            <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                            <option *ngFor=\\\"let seller of (master | async).sellers\\\"\\n                                [value]=\\\"seller.location.branchCode\\\">{{ seller.name.ja }}</option>\\n                        </select>\\n                        <!-- <div *ngIf=\\\"baseForm.controls.sellerBranchCode.invalid && baseForm.controls.sellerBranchCode.touched\\\"\\n                            class=\\\"mt-2\\\">\\n                            <p *ngIf=\\\"baseForm.controls.sellerBranchCode.errors.required\\\" class=\\\"text-danger\\\">\\n                                {{ 'form.validation.unselected' | translate }}</p>\\n                        </div> -->\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.pos' | translate }}</p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <select class=\\\"form-control\\\" formControlName=\\\"posId\\\">\\n                            <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                            <option *ngFor=\\\"let pos of posList\\\" [value]=\\\"pos.id\\\">{{ pos.name }}</option>\\n                        </select>\\n                        <!-- <div *ngIf=\\\"baseForm.controls.posId.invalid && baseForm.controls.posId.touched\\\"\\n                            class=\\\"mt-2\\\">\\n                            <p *ngIf=\\\"baseForm.controls.posId.errors.required\\\" class=\\\"text-danger\\\">\\n                                {{ 'form.validation.unselected' | translate }}</p>\\n                        </div> -->\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printer' | translate }}</p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <select class=\\\"form-control\\\" formControlName=\\\"printerType\\\">\\n                            <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                            <option *ngFor=\\\"let printer of printers\\\" [value]=\\\"printer.connectionType\\\">\\n                                {{ printer.name | translate }}</option>\\n                        </select>\\n                        <button\\n                            *ngIf=\\\"this.baseForm.controls.printerType.value && this.baseForm.controls.printerType.value !== connectionType.None\\\"\\n                            type=\\\"button\\\" class=\\\"btn btn-sm btn-primary py-2 mt-2\\\"\\n                            (click)=\\\"print()\\\">{{ 'setting.testPrinting' | translate }}</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printerIpAddress' | translate }}</p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"printerIpAddress\\\"\\n                            placeholder=\\\"0.0.0.0\\\">\\n                        <div *ngIf=\\\"baseForm.controls.printerIpAddress.invalid && baseForm.controls.printerIpAddress.touched\\\"\\n                            class=\\\"mt-2\\\">\\n                            <p *ngIf=\\\"baseForm.controls.printerIpAddress.errors.required\\\" class=\\\"text-danger\\\">\\n                                {{ 'form.validation.required' | translate }}</p>\\n                        </div>\\n                        <p class=\\\"text-small mt-2\\\">\\n                            {{ 'setting.printerIpAddressDescription' | translate }}\\n                        </p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"environment.SETTING_DEVELOP_OPTION\\\">\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\"> {{ 'setting.isPurchaseCart' | translate }}\\n                        </p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"isPurchaseCart\\\"\\n                                id=\\\"isPurchaseCart\\\" placeholder=\\\"\\\">\\n                                <option value=\\\"0\\\">{{ 'common.off' | translate }}</option>\\n                                <option value=\\\"1\\\">{{ 'common.on' | translate }}</option>\\n                            </select>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group mb-0\\\">\\n                    <div class=\\\"row align-items-center\\\">\\n                        <p class=\\\"col-md-4 py-2 text-md-right\\\"> {{ 'setting.viewType' | translate }}</p>\\n                        <div class=\\\"col-md-8\\\">\\n                            <select class=\\\"form-control\\\" id=\\\"viewType\\\" formControlName=\\\"viewType\\\">\\n                                <option [value]=\\\"viewType.Cinema\\\">{{ viewType.Cinema }}</option>\\n                                <option [value]=\\\"viewType.Event\\\">{{ viewType.Event }}</option>\\n                            </select>\\n                            <div *ngIf=\\\"baseForm.controls.viewType.invalid && baseForm.controls.viewType.touched\\\"\\n                                class=\\\"mt-2\\\">\\n                                <p *ngIf=\\\"baseForm.controls.viewType.errors.required\\\" class=\\\"text-danger\\\">\\n                                    {{ 'form.validation.required' | translate }}\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </form>\\n    </div>\\n    <div class=\\\"buttons mx-auto text-center\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary btn-block py-3 mb-3\\\" [disabled]=\\\"isLoading | async\\\"\\n            (click)=\\\"updateBase()\\\">{{ 'setting.next' | translate }}</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-link\\\"\\n            [routerLink]=\\\"environment.BASE_URL\\\">{{ 'setting.prev' | translate }}</button>\\n    </div>\\n\\n</div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvY2xpZW50L2FwcC9tb2R1bGVzL3NldHRpbmcvcGFnZXMvc2V0dGluZy9zZXR0aW5nLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../../../environments/environment';\nimport { connectionType, printers, ViewType } from '../../../../models';\nimport { MasterService, OrderService, UserService, UtilService } from '../../../../services';\nimport * as reducers from '../../../../store/reducers';\n\n@Component({\n    selector: 'app-setting',\n    templateUrl: './setting.component.html',\n    styleUrls: ['./setting.component.scss']\n})\nexport class SettingComponent implements OnInit {\n    public user: Observable<reducers.IUserState>;\n    public master: Observable<reducers.IMasterState>;\n    public error: Observable<string | null>;\n    public isLoading: Observable<boolean>;\n    public baseForm: FormGroup;\n    public cardExpiration: {\n        year: string[];\n        month: string[];\n    };\n    public amount: number;\n    public viewType: typeof ViewType = ViewType;\n    public posList: { id: string; name: string; typeOf: string; }[];\n    public printers: typeof printers = printers;\n    public connectionType: typeof connectionType = connectionType;\n    public environment = environment;\n\n    constructor(\n        private store: Store<reducers.IState>,\n        private utilService: UtilService,\n        private masterService: MasterService,\n        private userService: UserService,\n        private formBuilder: FormBuilder,\n        private translate: TranslateService,\n        private orderService: OrderService,\n        private router: Router\n    ) { }\n\n    public async ngOnInit() {\n        this.isLoading = this.store.pipe(select(reducers.getLoading));\n        this.user = this.store.pipe(select(reducers.getUser));\n        this.master = this.store.pipe(select(reducers.getMaster));\n        this.error = this.store.pipe(select(reducers.getError));\n        try {\n            await this.masterService.getSellers();\n            await this.createBaseForm();\n        } catch (error) {\n            console.error(error);\n            this.router.navigate(['/error']);\n        }\n    }\n\n    private async createBaseForm() {\n        this.baseForm = this.formBuilder.group({\n            sellerBranchCode: ['', [Validators.required]],\n            posId: ['', [Validators.required]],\n            printerType: ['', [Validators.required]],\n            printerIpAddress: [''],\n            isPurchaseCart: ['0', [\n                Validators.required,\n                Validators.pattern(/^[0-9]+$/)\n            ]],\n            viewType: ['', [\n                Validators.required\n            ]]\n        });\n        const user = await this.userService.getData();\n        if (user.seller !== undefined\n            && user.seller.location !== undefined) {\n            this.baseForm.controls.sellerBranchCode.setValue(user.seller.location.branchCode);\n        }\n        if (user.pos !== undefined) {\n            this.changePosList();\n            this.baseForm.controls.posId.setValue(user.pos.id);\n        }\n        if (user.printer !== undefined) {\n            this.baseForm.controls.printerType.setValue(user.printer.connectionType);\n            this.baseForm.controls.printerIpAddress.setValue(user.printer.ipAddress);\n        }\n        this.baseForm.controls.isPurchaseCart.setValue((user.isPurchaseCart) ? '1' : '0');\n        this.baseForm.controls.viewType.setValue(user.viewType);\n    }\n\n    /**\n     * 端末情報変更\n     */\n    public changePosList() {\n        this.baseForm.controls.posId.setValue('');\n        const sellerBranchCode = this.baseForm.controls.sellerBranchCode.value;\n        if (sellerBranchCode === '') {\n            this.posList = [];\n            return;\n        }\n        this.master.subscribe((master) => {\n            const findTheater =\n                master.sellers.find(theater =>\n                    (theater.location !== undefined && theater.location.branchCode === sellerBranchCode)\n                );\n            if (findTheater === undefined) {\n                this.posList = [];\n                return;\n            }\n            this.posList = (findTheater.hasPOS === undefined) ? [] : findTheater.hasPOS;\n        }).unsubscribe();\n    }\n\n    /**\n     * 更新\n     */\n    public async updateBase() {\n        Object.keys(this.baseForm.controls).forEach((key) => {\n            this.baseForm.controls[key].markAsTouched();\n        });\n        if (this.baseForm.invalid) {\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: this.translate.instant('setting.alert.validation')\n            });\n            return;\n        }\n        const master = await this.masterService.getData();\n        const findSeller = master.sellers.find((s) =>\n            (s.location !== undefined && s.location.branchCode === this.baseForm.controls.sellerBranchCode.value));\n        let findPos;\n        if (findSeller !== undefined && findSeller.hasPOS !== undefined) {\n            findPos = findSeller.hasPOS.find((pos: any) => {\n                return pos.id === this.baseForm.controls.posId.value;\n            });\n            if (findPos === undefined) {\n                return;\n            }\n        }\n        const isPurchaseCart = (this.baseForm.controls.isPurchaseCart.value === '1') ? true : false;\n        const viewType = this.baseForm.controls.viewType.value;\n        this.userService.updateBaseSetting({\n            seller: findSeller,\n            pos: findPos,\n            printer: {\n                ipAddress: this.baseForm.controls.printerIpAddress.value,\n                connectionType: this.baseForm.controls.printerType.value\n            },\n            isPurchaseCart,\n            viewType\n        });\n        this.utilService.openAlert({\n            title: this.translate.instant('common.complete'),\n            body: this.translate.instant('setting.alert.success')\n        });\n    }\n\n    public async print() {\n        try {\n            const printer = {\n                connectionType: this.baseForm.controls.printerType.value,\n                ipAddress: this.baseForm.controls.printerIpAddress.value\n            };\n            await this.orderService.print({ orders: [], printer });\n        } catch (error) {\n            console.error(error);\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: `\n                <p class=\"mb-4\">${this.translate.instant('setting.alert.print')}</p>\n                <div class=\"p-3 bg-light-gray select-text error\">\n                    <code>${error}</code>\n                </div>`\n            });\n        }\n    }\n\n    /**\n     * プリンター変更\n     */\n    public changePrinterType() {\n        if (this.baseForm.controls.printerType.value === connectionType.StarBluetooth) {\n            this.baseForm.controls.printerIpAddress.setValue(this.translate.instant('setting.starBluetoothAddress'));\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from '../shared/components/pages/base/base.component';\nimport { SettingComponent } from './pages/setting/setting.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n    children: [\n      { path: '', component: SettingComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SettingComponent } from './pages/setting/setting.component';\nimport { SettingRoutingModule } from './setting-routing.module';\n\n\n@NgModule({\n  declarations: [\n    SettingComponent\n  ],\n  imports: [\n    CommonModule,\n    SettingRoutingModule,\n    SharedModule,\n  ]\n})\nexport class SettingModule { }\n"],"sourceRoot":"webpack:///"}