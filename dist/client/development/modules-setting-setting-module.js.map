{"version":3,"sources":["./app/modules/setting/pages/setting/setting.component.html","./app/modules/setting/pages/setting/setting.component.scss","./app/modules/setting/pages/setting/setting.component.ts","./app/modules/setting/setting-routing.module.ts","./app/modules/setting/setting.module.ts"],"names":[],"mappings":"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","file":"modules-setting-setting-module.js","sourcesContent":["export default \"<div class=\\\"contents-width mx-auto px-3 py-5\\\">\\n    <h2 class=\\\"text-large mb-4 text-center font-weight-bold\\\">{{ 'setting.title' | translate }}</h2>\\n    <p class=\\\"mb-4 text-md-center\\\" [innerHTML]=\\\"'setting.read' | translate\\\"></p>\\n    <form *ngIf=\\\"baseForm\\\" [formGroup]=\\\"baseForm\\\">\\n        <div class=\\\"mb-4 p-3 bg-white\\\">\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'common.theater' | translate }}<span\\n                        class=\\\"badge badge-danger ml-2\\\">{{ 'common.required' | translate }}</span></p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <select class=\\\"form-control\\\" formControlName=\\\"theaterBranchCode\\\" (change)=\\\"changePosList()\\\">\\n                            <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                            <option *ngFor=\\\"let theater of (master | async).theaters\\\"\\n                                [value]=\\\"theater.branchCode\\\">{{ theater.name | changeLanguage }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.pos' | translate }}<span\\n                        class=\\\"badge badge-danger ml-2\\\">{{ 'common.required' | translate }}</span></p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <select class=\\\"form-control\\\" formControlName=\\\"posId\\\">\\n                            <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                            <option *ngFor=\\\"let pos of posList\\\" [value]=\\\"pos.id\\\">{{ pos.name }}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n            </div>\\n            \\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printer' | translate }}</p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <select class=\\\"form-control\\\" formControlName=\\\"printerType\\\">\\n                            <option value=\\\"\\\">{{ 'setting.unselected' | translate }}</option>\\n                            <option *ngFor=\\\"let printer of printers\\\" [value]=\\\"printer.connectionType\\\">\\n                                {{ printer.name | translate }}</option>\\n                        </select>\\n                        <button\\n                            *ngIf=\\\"this.baseForm.controls.printerType.value && this.baseForm.controls.printerType.value !== connectionType.None\\\"\\n                            type=\\\"button\\\" class=\\\"btn btn-sm btn-primary py-2 mt-2\\\"\\n                            (click)=\\\"print()\\\">{{ 'setting.testPrinting' | translate }}</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row align-items-center\\\">\\n                    <p class=\\\"col-md-4 py-2 text-md-right\\\">{{ 'setting.printerIpAddress' | translate }}</p>\\n                    <div class=\\\"col-md-8\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"printerIpAddress\\\"\\n                            placeholder=\\\"0.0.0.0\\\">\\n                        <div *ngIf=\\\"baseForm.controls.printerIpAddress.invalid && baseForm.controls.printerIpAddress.touched\\\"\\n                            class=\\\"mt-2\\\">\\n                            <p *ngIf=\\\"baseForm.controls.printerIpAddress.errors.required\\\" class=\\\"text-danger\\\">\\n                                {{ 'form.validation.required' | translate }}</p>\\n                        </div>\\n                        <p class=\\\"text-small mt-2\\\">\\n                            {{ 'setting.printerIpAddressDescription' | translate }}\\n                        </p>\\n                    </div>\\n                </div>\\n            </div>\\n            \\n\\n        </div>\\n        <div class=\\\"buttons mx-auto text-center\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-block py-3 mb-3\\\" [disabled]=\\\"isLoading | async\\\"\\n                (click)=\\\"updateBase()\\\">{{ 'setting.next' | translate }}</button>\\n            <button type=\\\"button\\\" class=\\\"btn btn-link\\\"\\n                [routerLink]=\\\"environment.BASE_URL\\\">{{ 'setting.prev' | translate }}</button>\\n        </div>\\n    </form>\\n</div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvY2xpZW50L2FwcC9tb2R1bGVzL3NldHRpbmcvcGFnZXMvc2V0dGluZy9zZXR0aW5nLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { getEnvironment } from '../../../../../environments/environment';\nimport { connectionType, printers, ViewType } from '../../../../models';\nimport { MasterService, OrderService, UserService, UtilService } from '../../../../services';\nimport * as reducers from '../../../../store/reducers';\n\n@Component({\n    selector: 'app-setting',\n    templateUrl: './setting.component.html',\n    styleUrls: ['./setting.component.scss']\n})\nexport class SettingComponent implements OnInit {\n    public user: Observable<reducers.IUserState>;\n    public master: Observable<reducers.IMasterState>;\n    public error: Observable<string | null>;\n    public isLoading: Observable<boolean>;\n    public baseForm: FormGroup;\n    public cardExpiration: {\n        year: string[];\n        month: string[];\n    };\n    public amount: number;\n    public viewType: typeof ViewType = ViewType;\n    public posList: { id: string; name: string; typeOf: string; }[];\n    public printers: typeof printers = printers;\n    public connectionType: typeof connectionType = connectionType;\n    public environment = getEnvironment();\n\n    constructor(\n        private store: Store<reducers.IState>,\n        private utilService: UtilService,\n        private masterService: MasterService,\n        private userService: UserService,\n        private formBuilder: FormBuilder,\n        private translate: TranslateService,\n        private orderService: OrderService,\n        private router: Router\n    ) { }\n\n    public async ngOnInit() {\n        this.isLoading = this.store.pipe(select(reducers.getLoading));\n        this.user = this.store.pipe(select(reducers.getUser));\n        this.master = this.store.pipe(select(reducers.getMaster));\n        this.error = this.store.pipe(select(reducers.getError));\n        try {\n            await this.masterService.getSellers();\n            await this.masterService.getTheaters();\n            await this.createBaseForm();\n        } catch (error) {\n            console.error(error);\n            this.router.navigate(['/error']);\n        }\n    }\n\n    private async createBaseForm() {\n        this.baseForm = this.formBuilder.group({\n            theaterBranchCode: ['', [Validators.required]],\n            posId: ['', [Validators.required]],\n            printerType: ['', [Validators.required]],\n            printerIpAddress: [''],\n        });\n        const user = await this.userService.getData();\n        if (user.theater !== undefined) {\n            this.baseForm.controls.theaterBranchCode.setValue(user.theater.branchCode);\n            this.changePosList();\n        }\n        if (user.pos !== undefined) {\n            this.baseForm.controls.posId.setValue(user.pos.id);\n        }\n        if (user.printer !== undefined) {\n            this.baseForm.controls.printerType.setValue(user.printer.connectionType);\n            this.baseForm.controls.printerIpAddress.setValue(user.printer.ipAddress);\n        }\n    }\n\n    /**\n     * POS変更\n     */\n    public changePosList() {\n        this.baseForm.controls.posId.setValue('');\n        const theaterBranchCode = this.baseForm.controls.theaterBranchCode.value;\n        if (theaterBranchCode === '') {\n            this.posList = [];\n            return;\n        }\n        this.master.subscribe((master) => {\n            const findResult = master.theaters.find(t => (t.branchCode === theaterBranchCode));\n            if (findResult === undefined) {\n                this.posList = [];\n                return;\n            }\n            this.posList = (findResult.hasPOS === undefined) ? [] : findResult.hasPOS;\n        }).unsubscribe();\n    }\n\n    /**\n     * 更新\n     */\n    public async updateBase() {\n        Object.keys(this.baseForm.controls).forEach((key) => {\n            this.baseForm.controls[key].markAsTouched();\n        });\n        if (this.baseForm.invalid) {\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: this.translate.instant('setting.alert.validation')\n            });\n            return;\n        }\n        try {\n            const masterData = await this.masterService.getData();\n            const theaterBranchCode = this.baseForm.controls.theaterBranchCode.value;\n            const posId = this.baseForm.controls.posId.value;\n            const theater = masterData.theaters.find(t => (t.branchCode === theaterBranchCode));\n            if (theater === undefined || theater.hasPOS === undefined) {\n                throw new Error('theater not found').message;\n            }\n            const pos = theater.hasPOS.find(p => p.id === posId);\n            if (pos === undefined) {\n                throw new Error('pos not found').message;\n            }\n            this.userService.updateBaseSetting({\n                pos,\n                theater,\n                printer: {\n                    ipAddress: this.baseForm.controls.printerIpAddress.value,\n                    connectionType: this.baseForm.controls.printerType.value\n                }\n            });\n            this.utilService.openAlert({\n                title: this.translate.instant('common.complete'),\n                body: this.translate.instant('setting.alert.success')\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    public async print() {\n        try {\n            const printer = {\n                connectionType: this.baseForm.controls.printerType.value,\n                ipAddress: this.baseForm.controls.printerIpAddress.value\n            };\n            await this.orderService.print({ orders: [], printer });\n        } catch (error) {\n            console.error(error);\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: `\n                <p class=\"mb-4\">${this.translate.instant('setting.alert.print')}</p>\n                <div class=\"p-3 bg-light-gray select-text error\">\n                    <code>${error}</code>\n                </div>`\n            });\n        }\n    }\n\n    /**\n     * プリンター変更\n     */\n    public changePrinterType() {\n        if (this.baseForm.controls.printerType.value === connectionType.StarBluetooth) {\n            this.baseForm.controls.printerIpAddress.setValue(this.translate.instant('setting.starBluetoothAddress'));\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from '../shared/components/pages/base/base.component';\nimport { SettingComponent } from './pages/setting/setting.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n    children: [\n      { path: '', component: SettingComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SettingComponent } from './pages/setting/setting.component';\nimport { SettingRoutingModule } from './setting-routing.module';\n\n\n@NgModule({\n  declarations: [\n    SettingComponent\n  ],\n  imports: [\n    CommonModule,\n    SettingRoutingModule,\n    SharedModule,\n  ]\n})\nexport class SettingModule { }\n"],"sourceRoot":"webpack:///"}