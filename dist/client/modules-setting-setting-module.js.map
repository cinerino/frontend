{"version":3,"sources":["./app/modules/setting/pages/setting/setting.component.ts","./app/modules/setting/pages/setting/setting.component.html","./app/modules/setting/setting-routing.module.ts","./app/modules/setting/setting.module.ts"],"names":[],"mappings":"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","file":"modules-setting-setting-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { factory } from '@cinerino/sdk';\nimport { select, Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { Models } from '../../../..';\nimport { getEnvironment } from '../../../../../environments/environment';\nimport { ActionService, MasterService, UtilService } from '../../../../services';\nimport * as reducers from '../../../../store/reducers';\n\n@Component({\n    selector: 'app-setting',\n    templateUrl: './setting.component.html',\n    styleUrls: ['./setting.component.scss']\n})\nexport class SettingComponent implements OnInit {\n    public user: Observable<reducers.IUserState>;\n    public error: Observable<string | null>;\n    public isLoading: Observable<boolean>;\n    public baseForm: FormGroup;\n    public cardExpiration: {\n        year: string[];\n        month: string[];\n    };\n    public amount: number;\n    public viewType = Models.Common.ViewType;\n    public posList: { id: string; name: string; typeOf: string; }[];\n    public printers = Models.Common.Printer.printers;\n    public connectionType = Models.Common.Printer.ConnectionType;\n    public theaters: factory.chevre.place.movieTheater.IPlaceWithoutScreeningRoom[];\n    public environment = getEnvironment();\n\n    constructor(\n        private store: Store<reducers.IState>,\n        private utilService: UtilService,\n        private masterService: MasterService,\n        private actionService: ActionService,\n        private formBuilder: FormBuilder,\n        private translate: TranslateService,\n        private router: Router\n    ) { }\n\n    public async ngOnInit() {\n        this.isLoading = this.store.pipe(select(reducers.getLoading));\n        this.user = this.store.pipe(select(reducers.getUser));\n        this.error = this.store.pipe(select(reducers.getError));\n        this.theaters = [];\n        try {\n            this.theaters = await this.masterService.searchMovieTheaters();\n            await this.createBaseForm();\n        } catch (error) {\n            console.error(error);\n            this.router.navigate(['/error']);\n        }\n    }\n\n    private async createBaseForm() {\n        this.baseForm = this.formBuilder.group({\n            theaterBranchCode: ['', [Validators.required]],\n            posId: ['', [Validators.required]],\n            printerType: ['', [Validators.required]],\n            printerIpAddress: [''],\n        });\n        const user = await this.actionService.user.getData();\n        if (user.theater !== undefined) {\n            this.baseForm.controls.theaterBranchCode.setValue(user.theater.branchCode);\n            this.changePosList();\n        }\n        if (user.pos !== undefined) {\n            this.baseForm.controls.posId.setValue(user.pos.id);\n        }\n        if (user.printer !== undefined) {\n            this.baseForm.controls.printerType.setValue(user.printer.connectionType);\n            this.baseForm.controls.printerIpAddress.setValue(user.printer.ipAddress);\n        }\n    }\n\n    /**\n     * POS変更\n     */\n    public changePosList() {\n        this.baseForm.controls.posId.setValue('');\n        const theaterBranchCode = this.baseForm.controls.theaterBranchCode.value;\n        if (theaterBranchCode === '') {\n            this.posList = [];\n            return;\n        }\n        const findResult = this.theaters.find(t => (t.branchCode === theaterBranchCode));\n        if (findResult === undefined) {\n            this.posList = [];\n            return;\n        }\n        this.posList = (findResult.hasPOS === undefined) ? [] : findResult.hasPOS;\n    }\n\n    /**\n     * 更新\n     */\n    public async updateBase() {\n        Object.keys(this.baseForm.controls).forEach((key) => {\n            this.baseForm.controls[key].markAsTouched();\n        });\n        if (this.baseForm.invalid) {\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: this.translate.instant('setting.alert.validation')\n            });\n            return;\n        }\n        try {\n            const theaterBranchCode = this.baseForm.controls.theaterBranchCode.value;\n            const posId = this.baseForm.controls.posId.value;\n            const theater = this.theaters.find(t => (t.branchCode === theaterBranchCode));\n            if (theater === undefined || theater.hasPOS === undefined) {\n                throw new Error('theater not found');\n            }\n            const pos = theater.hasPOS.find(p => p.id === posId);\n            if (pos === undefined) {\n                throw new Error('pos not found');\n            }\n            this.actionService.user.updateBaseSetting({\n                pos,\n                theater,\n                printer: {\n                    ipAddress: this.baseForm.controls.printerIpAddress.value,\n                    connectionType: this.baseForm.controls.printerType.value\n                }\n            });\n            this.utilService.openAlert({\n                title: this.translate.instant('common.complete'),\n                body: this.translate.instant('setting.alert.success')\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    public async print() {\n        try {\n            const printer = {\n                connectionType: this.baseForm.controls.printerType.value,\n                ipAddress: this.baseForm.controls.printerIpAddress.value\n            };\n            await this.actionService.order.print({ orders: [], printer });\n        } catch (error) {\n            console.error(error);\n            this.utilService.openAlert({\n                title: this.translate.instant('common.error'),\n                body: `\n                <p class=\"mb-4\">${this.translate.instant('setting.alert.print')}</p>\n                <div class=\"p-3 bg-light-gray select-text error\">\n                    <code>${error}</code>\n                </div>`\n            });\n        }\n    }\n\n    /**\n     * プリンター変更\n     */\n    public changePrinterType() {\n        if (this.baseForm.controls.printerType.value === Models.Common.Printer.ConnectionType.StarBluetooth) {\n            this.baseForm.controls.printerIpAddress.setValue(this.translate.instant('setting.starBluetoothAddress'));\n        }\n    }\n\n}\n","<div class=\"contents-width mx-auto px-3 py-5\">\n    <h2 class=\"text-large mb-4 text-center font-weight-bold\">{{ 'setting.title' | translate }}</h2>\n    <p class=\"mb-4 text-md-center\" [innerHTML]=\"'setting.read' | translate\"></p>\n    <form *ngIf=\"baseForm\" [formGroup]=\"baseForm\">\n        <div class=\"mb-4 p-3 bg-white\">\n\n            <div class=\"form-group\">\n                <div class=\"row align-items-center\">\n                    <p class=\"col-md-4 py-2 text-md-right\">{{ 'common.theater' | translate }}<span\n                        class=\"badge badge-danger ml-2\">{{ 'form.required' | translate }}</span></p>\n                    <div class=\"col-md-8\">\n                        <select class=\"form-control\" formControlName=\"theaterBranchCode\" (change)=\"changePosList()\">\n                            <option value=\"\">{{ 'setting.unselected' | translate }}</option>\n                            <option *ngFor=\"let theater of theaters\"\n                                [value]=\"theater.branchCode\">{{ theater.name | changeLanguage }}</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"row align-items-center\">\n                    <p class=\"col-md-4 py-2 text-md-right\">{{ 'setting.pos' | translate }}<span\n                        class=\"badge badge-danger ml-2\">{{ 'form.required' | translate }}</span></p>\n                    <div class=\"col-md-8\">\n                        <select class=\"form-control\" formControlName=\"posId\">\n                            <option value=\"\">{{ 'setting.unselected' | translate }}</option>\n                            <option *ngFor=\"let pos of posList\" [value]=\"pos.id\">{{ pos.name }}</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"form-group\">\n                <div class=\"row align-items-center\">\n                    <p class=\"col-md-4 py-2 text-md-right\">{{ 'setting.printer' | translate }}</p>\n                    <div class=\"col-md-8\">\n                        <select class=\"form-control\" formControlName=\"printerType\">\n                            <option value=\"\">{{ 'setting.unselected' | translate }}</option>\n                            <option *ngFor=\"let printer of printers\" [value]=\"printer.connectionType\">\n                                {{ printer.name | translate }}</option>\n                        </select>\n                        <button\n                            *ngIf=\"this.baseForm.controls.printerType.value && this.baseForm.controls.printerType.value !== connectionType.None\"\n                            type=\"button\" class=\"btn btn-sm btn-primary py-2 mt-2\"\n                            (click)=\"print()\">{{ 'setting.testPrinting' | translate }}</button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"row align-items-center\">\n                    <p class=\"col-md-4 py-2 text-md-right\">{{ 'setting.printerIpAddress' | translate }}</p>\n                    <div class=\"col-md-8\">\n                        <input type=\"text\" class=\"form-control\" formControlName=\"printerIpAddress\"\n                            placeholder=\"0.0.0.0\">\n                        <div *ngIf=\"baseForm.controls.printerIpAddress.invalid && baseForm.controls.printerIpAddress.touched\"\n                            class=\"mt-2\">\n                            <p *ngIf=\"baseForm.controls.printerIpAddress.errors?.required\" class=\"text-danger\">\n                                {{ 'form.validation.required' | translate }}</p>\n                        </div>\n                        <p class=\"text-small mt-2\">\n                            {{ 'setting.printerIpAddressDescription' | translate }}\n                        </p>\n                    </div>\n                </div>\n            </div>\n            \n\n        </div>\n        <div class=\"buttons mx-auto text-center\">\n            <button type=\"submit\" class=\"btn btn-primary btn-block py-3 mb-3\" [disabled]=\"isLoading | async\"\n                (click)=\"updateBase()\">{{ 'setting.next' | translate }}</button>\n            <button type=\"button\" class=\"btn btn-outline-primary btn-block py-3\"\n                [routerLink]=\"environment.BASE_URL\">{{ 'setting.prev' | translate }}</button>\n        </div>\n    </form>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from '../shared/components/pages/base/base.component';\nimport { SettingComponent } from './pages/setting/setting.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n    children: [\n      { path: '', component: SettingComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SettingComponent } from './pages/setting/setting.component';\nimport { SettingRoutingModule } from './setting-routing.module';\n\n\n@NgModule({\n  declarations: [\n    SettingComponent\n  ],\n  imports: [\n    CommonModule,\n    SettingRoutingModule,\n    SharedModule,\n  ]\n})\nexport class SettingModule { }\n"],"sourceRoot":"webpack:///"}