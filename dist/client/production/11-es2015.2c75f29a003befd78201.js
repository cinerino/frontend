(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{AL2A:function(e,t,n){"use strict";n.r(t);var r=n("An66"),s=n("kZht"),o=n("DSWM"),i=n("3kIJ"),a=n("1VvW"),l=n("ofez"),c=n("aDqW"),d=n("PIN6"),p=n("i7xV"),u=n("cHUu"),m=n("mOXJ"),v=function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i},h=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},f=function(e,t,n,r){return new(n||(n=Promise))(function(s,o){function i(e){try{l(r.next(e))}catch(t){o(t)}}function a(e){try{l(r.throw(e))}catch(t){o(t)}}function l(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(i,a)}l((r=r.apply(e,t||[])).next())})},b=function(e){return e&&e.__esModule?e:{default:e}};let g=class{constructor(e,t,n,r,s,o,i,a){this.store=e,this.utilService=t,this.masterService=n,this.userService=r,this.formBuilder=s,this.translate=o,this.orderService=i,this.router=a,this.viewType=p.f,this.printers=p.h,this.connectionType=p.g,this.environment=d.a}ngOnInit(){return f(this,void 0,void 0,function*(){this.isLoading=this.store.pipe(Object(l.i)(m.b)),this.user=this.store.pipe(Object(l.i)(m.g)),this.master=this.store.pipe(Object(l.i)(m.c)),this.error=this.store.pipe(Object(l.i)(m.a));try{yield this.masterService.getSellers(),yield this.createBaseForm()}catch(e){console.error(e),this.router.navigate(["/error"])}})}createBaseForm(){return f(this,void 0,void 0,function*(){this.baseForm=this.formBuilder.group({sellerBranchCode:["",[i.f.required]],posId:["",[i.f.required]],printerType:["",[i.f.required]],printerIpAddress:[""],isPurchaseCart:["0",[i.f.required,i.f.pattern(/^[0-9]+$/)]],viewType:["",[i.f.required]]});const e=yield this.userService.getData();void 0!==e.seller&&void 0!==e.seller.location&&this.baseForm.controls.sellerBranchCode.setValue(e.seller.location.branchCode),void 0!==e.pos&&(this.changePosList(),this.baseForm.controls.posId.setValue(e.pos.id)),void 0!==e.printer&&(this.baseForm.controls.printerType.setValue(e.printer.connectionType),this.baseForm.controls.printerIpAddress.setValue(e.printer.ipAddress)),this.baseForm.controls.isPurchaseCart.setValue(e.isPurchaseCart?"1":"0"),this.baseForm.controls.viewType.setValue(e.viewType)})}changePosList(){this.baseForm.controls.posId.setValue("");const e=this.baseForm.controls.sellerBranchCode.value;""!==e?this.master.subscribe(t=>{const n=t.sellers.find(t=>void 0!==t.location&&t.location.branchCode===e);this.posList=void 0!==n?void 0===n.hasPOS?[]:n.hasPOS:[]}).unsubscribe():this.posList=[]}updateBase(){return f(this,void 0,void 0,function*(){if(Object.keys(this.baseForm.controls).forEach(e=>{this.baseForm.controls[e].markAsTouched()}),this.baseForm.invalid)return void this.utilService.openAlert({title:this.translate.instant("common.error"),body:this.translate.instant("setting.alert.validation")});const e=(yield this.masterService.getData()).sellers.find(e=>void 0!==e.location&&e.location.branchCode===this.baseForm.controls.sellerBranchCode.value);let t;if(void 0!==e&&void 0!==e.hasPOS&&void 0===(t=e.hasPOS.find(e=>e.id===this.baseForm.controls.posId.value)))return;const n="1"===this.baseForm.controls.isPurchaseCart.value,r=this.baseForm.controls.viewType.value;this.userService.updateBaseSetting({seller:e,pos:t,printer:{ipAddress:this.baseForm.controls.printerIpAddress.value,connectionType:this.baseForm.controls.printerType.value},isPurchaseCart:n,viewType:r}),this.utilService.openAlert({title:this.translate.instant("common.complete"),body:this.translate.instant("setting.alert.success")})})}print(){return f(this,void 0,void 0,function*(){try{const t={connectionType:this.baseForm.controls.printerType.value,ipAddress:this.baseForm.controls.printerIpAddress.value};yield this.orderService.print({orders:[],printer:t})}catch(e){console.error(e),this.utilService.openAlert({title:this.translate.instant("common.error"),body:`\n                <p class="mb-4">${this.translate.instant("setting.alert.print")}</p>\n                <div class="p-3 bg-light-gray select-text error">\n                    <code>${e}</code>\n                </div>`})}})}changePrinterType(){this.baseForm.controls.printerType.value===p.g.StarBluetooth&&this.baseForm.controls.printerIpAddress.setValue(this.translate.instant("setting.starBluetoothAddress"))}};g.ctorParameters=()=>[{type:l.b},{type:u.g},{type:u.b},{type:u.f},{type:i.a},{type:c.c},{type:u.c},{type:a.c}],g=v([Object(s.n)({selector:"app-setting",template:b(n("XREv")).default,styles:[b(n("zopa")).default]}),h("design:paramtypes",[l.b,u.g,u.b,u.f,i.a,c.c,u.c,a.c])],g);var y=function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};const F=[{path:"",component:n("RRjC").a,children:[{path:"",component:g}]}];let w=class{};w=y([Object(s.I)({imports:[a.d.forChild(F)],exports:[a.d]})],w),n.d(t,"SettingModule",function(){return I});let I=class{};I=function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i}([Object(s.I)({declarations:[g],imports:[r.b,w,o.a]})],I)},XREv:function(e,t,n){"use strict";n.r(t),t.default='<div class="contents-width mx-auto px-3 py-5">\n    <h2 class="text-large mb-4 text-center font-weight-bold">{{ \'setting.title\' | translate }}</h2>\n    <p class="mb-4 text-md-center" [innerHTML]="\'setting.read\' | translate"></p>\n\n    <div class="mb-4 p-3 bg-white">\n        <form *ngIf="baseForm" [formGroup]="baseForm">\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'common.theater\' | translate }}</p>\n                    <div class="col-md-8">\n                        <select class="form-control" formControlName="sellerBranchCode" (change)="changePosList()">\n                            <option value="">{{ \'setting.unselected\' | translate }}</option>\n                            <option *ngFor="let seller of (master | async).sellers"\n                                [value]="seller.location.branchCode">{{ seller.name.ja }}</option>\n                        </select>\n                        \x3c!-- <div *ngIf="baseForm.controls.sellerBranchCode.invalid && baseForm.controls.sellerBranchCode.touched"\n                            class="mt-2">\n                            <p *ngIf="baseForm.controls.sellerBranchCode.errors.required" class="text-danger">\n                                {{ \'form.validation.unselected\' | translate }}</p>\n                        </div> --\x3e\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'setting.pos\' | translate }}</p>\n                    <div class="col-md-8">\n                        <select class="form-control" formControlName="posId">\n                            <option value="">{{ \'setting.unselected\' | translate }}</option>\n                            <option *ngFor="let pos of posList" [value]="pos.id">{{ pos.name }}</option>\n                        </select>\n                        \x3c!-- <div *ngIf="baseForm.controls.posId.invalid && baseForm.controls.posId.touched"\n                            class="mt-2">\n                            <p *ngIf="baseForm.controls.posId.errors.required" class="text-danger">\n                                {{ \'form.validation.unselected\' | translate }}</p>\n                        </div> --\x3e\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'setting.printer\' | translate }}</p>\n                    <div class="col-md-8">\n                        <select class="form-control" formControlName="printerType">\n                            <option value="">{{ \'setting.unselected\' | translate }}</option>\n                            <option *ngFor="let printer of printers" [value]="printer.connectionType">\n                                {{ printer.name | translate }}</option>\n                        </select>\n                        <button\n                            *ngIf="this.baseForm.controls.printerType.value && this.baseForm.controls.printerType.value !== connectionType.None"\n                            type="button" class="btn btn-sm btn-primary py-2 mt-2"\n                            (click)="print()">{{ \'setting.testPrinting\' | translate }}</button>\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'setting.printerIpAddress\' | translate }}</p>\n                    <div class="col-md-8">\n                        <input type="text" class="form-control" formControlName="printerIpAddress"\n                            placeholder="0.0.0.0">\n                        <div *ngIf="baseForm.controls.printerIpAddress.invalid && baseForm.controls.printerIpAddress.touched"\n                            class="mt-2">\n                            <p *ngIf="baseForm.controls.printerIpAddress.errors.required" class="text-danger">\n                                {{ \'form.validation.required\' | translate }}</p>\n                        </div>\n                        <p class="text-small mt-2">\n                            {{ \'setting.printerIpAddressDescription\' | translate }}\n                        </p>\n                    </div>\n                </div>\n            </div>\n            <div *ngIf="environment.SETTING_DEVELOP_OPTION">\n                <div class="form-group">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right"> {{ \'setting.isPurchaseCart\' | translate }}\n                        </p>\n                        <div class="col-md-8">\n                            <select type="text" class="form-control" formControlName="isPurchaseCart"\n                                id="isPurchaseCart" placeholder="">\n                                <option value="0">{{ \'common.off\' | translate }}</option>\n                                <option value="1">{{ \'common.on\' | translate }}</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                <div class="form-group mb-0">\n                    <div class="row align-items-center">\n                        <p class="col-md-4 py-2 text-md-right"> {{ \'setting.viewType\' | translate }}</p>\n                        <div class="col-md-8">\n                            <select class="form-control" id="viewType" formControlName="viewType">\n                                <option [value]="viewType.Cinema">{{ viewType.Cinema }}</option>\n                                <option [value]="viewType.Event">{{ viewType.Event }}</option>\n                            </select>\n                            <div *ngIf="baseForm.controls.viewType.invalid && baseForm.controls.viewType.touched"\n                                class="mt-2">\n                                <p *ngIf="baseForm.controls.viewType.errors.required" class="text-danger">\n                                    {{ \'form.validation.required\' | translate }}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </form>\n    </div>\n    <div class="buttons mx-auto text-center">\n        <button type="button" class="btn btn-primary btn-block py-3 mb-3" [disabled]="isLoading | async"\n            (click)="updateBase()">{{ \'setting.next\' | translate }}</button>\n        <button type="button" class="btn btn-link"\n            [routerLink]="environment.BASE_URL">{{ \'setting.prev\' | translate }}</button>\n    </div>\n\n</div>'},zopa:function(e,t,n){"use strict";n.r(t),t.default=""}}]);