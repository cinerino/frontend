(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{AL2A:function(t,e,n){"use strict";n.r(e),n.d(e,"SettingModule",(function(){return j}));var r=n("2kYt"),s=n("EM62"),o=n("DSWM"),i=n("nIj0"),a=n("sEIs"),c=n("sN6X"),l=n("s2Ay"),p=n("x8Mb"),d=n("PIN6"),h=n("cHUu"),u=n("mOXJ"),m=function(t,e,n,r){var s,o=arguments.length,i=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(i=(o<3?s(i):o>3?s(e,n,i):s(e,n))||i);return o>3&&i&&Object.defineProperty(e,n,i),i},v=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},f=function(t,e,n,r){return new(n||(n=Promise))((function(s,o){function i(t){try{c(r.next(t))}catch(e){o(e)}}function a(t){try{c(r.throw(t))}catch(e){o(e)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,a)}c((r=r.apply(t,e||[])).next())}))},b=function(t){return t&&t.__esModule?t:{default:t}};let g=class{constructor(t,e,n,r,s,o,i,a){this.store=t,this.utilService=e,this.masterService=n,this.userService=r,this.formBuilder=s,this.translate=o,this.orderService=i,this.router=a,this.viewType=p.b.Common.ViewType,this.printers=p.b.Common.Printer.printers,this.connectionType=p.b.Common.Printer.ConnectionType,this.environment=Object(d.a)()}ngOnInit(){return f(this,void 0,void 0,(function*(){this.isLoading=this.store.pipe(Object(c.m)(u.b)),this.user=this.store.pipe(Object(c.m)(u.g)),this.error=this.store.pipe(Object(c.m)(u.a)),this.theaters=[];try{this.theaters=yield this.masterService.getTheaters(),yield this.createBaseForm()}catch(t){console.error(t),this.router.navigate(["/error"])}}))}createBaseForm(){return f(this,void 0,void 0,(function*(){this.baseForm=this.formBuilder.group({theaterBranchCode:["",[i.j.required]],posId:["",[i.j.required]],printerType:["",[i.j.required]],printerIpAddress:[""]});const t=yield this.userService.getData();void 0!==t.theater&&(this.baseForm.controls.theaterBranchCode.setValue(t.theater.branchCode),this.changePosList()),void 0!==t.pos&&this.baseForm.controls.posId.setValue(t.pos.id),void 0!==t.printer&&(this.baseForm.controls.printerType.setValue(t.printer.connectionType),this.baseForm.controls.printerIpAddress.setValue(t.printer.ipAddress))}))}changePosList(){this.baseForm.controls.posId.setValue("");const t=this.baseForm.controls.theaterBranchCode.value;if(""===t)return void(this.posList=[]);const e=this.theaters.find(e=>e.branchCode===t);this.posList=void 0!==e?void 0===e.hasPOS?[]:e.hasPOS:[]}updateBase(){return f(this,void 0,void 0,(function*(){if(Object.keys(this.baseForm.controls).forEach(t=>{this.baseForm.controls[t].markAsTouched()}),this.baseForm.invalid)this.utilService.openAlert({title:this.translate.instant("common.error"),body:this.translate.instant("setting.alert.validation")});else try{const t=this.baseForm.controls.theaterBranchCode.value,e=this.baseForm.controls.posId.value,n=this.theaters.find(e=>e.branchCode===t);if(void 0===n||void 0===n.hasPOS)throw new Error("theater not found").message;const r=n.hasPOS.find(t=>t.id===e);if(void 0===r)throw new Error("pos not found").message;this.userService.updateBaseSetting({pos:r,theater:n,printer:{ipAddress:this.baseForm.controls.printerIpAddress.value,connectionType:this.baseForm.controls.printerType.value}}),this.utilService.openAlert({title:this.translate.instant("common.complete"),body:this.translate.instant("setting.alert.success")})}catch(t){console.error(t)}}))}print(){return f(this,void 0,void 0,(function*(){try{const t={connectionType:this.baseForm.controls.printerType.value,ipAddress:this.baseForm.controls.printerIpAddress.value};yield this.orderService.print({orders:[],printer:t})}catch(t){console.error(t),this.utilService.openAlert({title:this.translate.instant("common.error"),body:`\n                <p class="mb-4">${this.translate.instant("setting.alert.print")}</p>\n                <div class="p-3 bg-light-gray select-text error">\n                    <code>${t}</code>\n                </div>`})}}))}changePrinterType(){this.baseForm.controls.printerType.value===p.b.Common.Printer.ConnectionType.StarBluetooth&&this.baseForm.controls.printerIpAddress.setValue(this.translate.instant("setting.starBluetoothAddress"))}};g.ctorParameters=()=>[{type:c.b},{type:h.i},{type:h.c},{type:h.h},{type:i.b},{type:l.c},{type:h.d},{type:a.c}],g=m([Object(s.n)({selector:"app-setting",template:b(n("XREv")).default,styles:[b(n("zopa")).default]}),v("design:paramtypes",[c.b,h.i,h.c,h.h,i.b,l.c,h.d,a.c])],g);var y=function(t,e,n,r){var s,o=arguments.length,i=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(i=(o<3?s(i):o>3?s(e,n,i):s(e,n))||i);return o>3&&i&&Object.defineProperty(e,n,i),i};const F=[{path:"",component:n("RRjC").a,children:[{path:"",component:g}]}];let w=class{};w=y([Object(s.K)({imports:[a.d.forChild(F)],exports:[a.d]})],w);var I=function(t,e,n,r){var s,o=arguments.length,i=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(i=(o<3?s(i):o>3?s(e,n,i):s(e,n))||i);return o>3&&i&&Object.defineProperty(e,n,i),i};let j=class{};j=I([Object(s.K)({declarations:[g],imports:[r.c,w,o.a]})],j)},XREv:function(t,e,n){"use strict";n.r(e),e.default='<div class="contents-width mx-auto px-3 py-5">\n    <h2 class="text-large mb-4 text-center font-weight-bold">{{ \'setting.title\' | translate }}</h2>\n    <p class="mb-4 text-md-center" [innerHTML]="\'setting.read\' | translate"></p>\n    <form *ngIf="baseForm" [formGroup]="baseForm">\n        <div class="mb-4 p-3 bg-white">\n\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'common.theater\' | translate }}<span\n                        class="badge badge-danger ml-2">{{ \'form.required\' | translate }}</span></p>\n                    <div class="col-md-8">\n                        <select class="form-control" formControlName="theaterBranchCode" (change)="changePosList()">\n                            <option value="">{{ \'setting.unselected\' | translate }}</option>\n                            <option *ngFor="let theater of theaters"\n                                [value]="theater.branchCode">{{ theater.name | changeLanguage }}</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'setting.pos\' | translate }}<span\n                        class="badge badge-danger ml-2">{{ \'form.required\' | translate }}</span></p>\n                    <div class="col-md-8">\n                        <select class="form-control" formControlName="posId">\n                            <option value="">{{ \'setting.unselected\' | translate }}</option>\n                            <option *ngFor="let pos of posList" [value]="pos.id">{{ pos.name }}</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            \n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'setting.printer\' | translate }}</p>\n                    <div class="col-md-8">\n                        <select class="form-control" formControlName="printerType">\n                            <option value="">{{ \'setting.unselected\' | translate }}</option>\n                            <option *ngFor="let printer of printers" [value]="printer.connectionType">\n                                {{ printer.name | translate }}</option>\n                        </select>\n                        <button\n                            *ngIf="this.baseForm.controls.printerType.value && this.baseForm.controls.printerType.value !== connectionType.None"\n                            type="button" class="btn btn-sm btn-primary py-2 mt-2"\n                            (click)="print()">{{ \'setting.testPrinting\' | translate }}</button>\n                    </div>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="row align-items-center">\n                    <p class="col-md-4 py-2 text-md-right">{{ \'setting.printerIpAddress\' | translate }}</p>\n                    <div class="col-md-8">\n                        <input type="text" class="form-control" formControlName="printerIpAddress"\n                            placeholder="0.0.0.0">\n                        <div *ngIf="baseForm.controls.printerIpAddress.invalid && baseForm.controls.printerIpAddress.touched"\n                            class="mt-2">\n                            <p *ngIf="baseForm.controls.printerIpAddress.errors?.required" class="text-danger">\n                                {{ \'form.validation.required\' | translate }}</p>\n                        </div>\n                        <p class="text-small mt-2">\n                            {{ \'setting.printerIpAddressDescription\' | translate }}\n                        </p>\n                    </div>\n                </div>\n            </div>\n            \n\n        </div>\n        <div class="buttons mx-auto text-center">\n            <button type="submit" class="btn btn-primary btn-block py-3 mb-3" [disabled]="isLoading | async"\n                (click)="updateBase()">{{ \'setting.next\' | translate }}</button>\n            <button type="button" class="btn btn-link"\n                [routerLink]="environment.BASE_URL">{{ \'setting.prev\' | translate }}</button>\n        </div>\n    </form>\n</div>'},zopa:function(t,e,n){"use strict";n.r(e),e.default=""}}]);